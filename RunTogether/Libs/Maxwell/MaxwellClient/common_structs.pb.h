// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_structs.proto

#ifndef PROTOBUF_common_5fstructs_2eproto__INCLUDED
#define PROTOBUF_common_5fstructs_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace maxwell {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_common_5fstructs_2eproto();
void protobuf_AssignDesc_common_5fstructs_2eproto();
void protobuf_ShutdownFile_common_5fstructs_2eproto();

class endpoint_t;
class agent_id_t;
class session_id_t;

// ===================================================================

class endpoint_t : public ::google::protobuf::Message {
 public:
  endpoint_t();
  virtual ~endpoint_t();

  endpoint_t(const endpoint_t& from);

  inline endpoint_t& operator=(const endpoint_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const endpoint_t& default_instance();

  void Swap(endpoint_t* other);

  // implements Message ----------------------------------------------

  endpoint_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const endpoint_t& from);
  void MergeFrom(const endpoint_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string address = 1;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 1;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const char* value, size_t size);
  inline ::std::string* mutable_address();
  inline ::std::string* release_address();
  inline void set_allocated_address(::std::string* address);

  // required uint32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:maxwell.protocol.endpoint_t)
 private:
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* address_;
  ::google::protobuf::uint32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fstructs_2eproto();
  friend void protobuf_AssignDesc_common_5fstructs_2eproto();
  friend void protobuf_ShutdownFile_common_5fstructs_2eproto();

  void InitAsDefaultInstance();
  static endpoint_t* default_instance_;
};
// -------------------------------------------------------------------

class agent_id_t : public ::google::protobuf::Message {
 public:
  agent_id_t();
  virtual ~agent_id_t();

  agent_id_t(const agent_id_t& from);

  inline agent_id_t& operator=(const agent_id_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const agent_id_t& default_instance();

  void Swap(agent_id_t* other);

  // implements Message ----------------------------------------------

  agent_id_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const agent_id_t& from);
  void MergeFrom(const agent_id_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // required string agent_key = 2;
  inline bool has_agent_key() const;
  inline void clear_agent_key();
  static const int kAgentKeyFieldNumber = 2;
  inline const ::std::string& agent_key() const;
  inline void set_agent_key(const ::std::string& value);
  inline void set_agent_key(const char* value);
  inline void set_agent_key(const char* value, size_t size);
  inline ::std::string* mutable_agent_key();
  inline ::std::string* release_agent_key();
  inline void set_allocated_agent_key(::std::string* agent_key);

  // @@protoc_insertion_point(class_scope:maxwell.protocol.agent_id_t)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_agent_key();
  inline void clear_has_agent_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_id_;
  ::std::string* agent_key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fstructs_2eproto();
  friend void protobuf_AssignDesc_common_5fstructs_2eproto();
  friend void protobuf_ShutdownFile_common_5fstructs_2eproto();

  void InitAsDefaultInstance();
  static agent_id_t* default_instance_;
};
// -------------------------------------------------------------------

class session_id_t : public ::google::protobuf::Message {
 public:
  session_id_t();
  virtual ~session_id_t();

  session_id_t(const session_id_t& from);

  inline session_id_t& operator=(const session_id_t& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const session_id_t& default_instance();

  void Swap(session_id_t* other);

  // implements Message ----------------------------------------------

  session_id_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const session_id_t& from);
  void MergeFrom(const session_id_t& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint64 user_id() const;
  inline void set_user_id(::google::protobuf::uint64 value);

  // required string session_key = 2;
  inline bool has_session_key() const;
  inline void clear_session_key();
  static const int kSessionKeyFieldNumber = 2;
  inline const ::std::string& session_key() const;
  inline void set_session_key(const ::std::string& value);
  inline void set_session_key(const char* value);
  inline void set_session_key(const char* value, size_t size);
  inline ::std::string* mutable_session_key();
  inline ::std::string* release_session_key();
  inline void set_allocated_session_key(::std::string* session_key);

  // @@protoc_insertion_point(class_scope:maxwell.protocol.session_id_t)
 private:
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_session_key();
  inline void clear_has_session_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 user_id_;
  ::std::string* session_key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_common_5fstructs_2eproto();
  friend void protobuf_AssignDesc_common_5fstructs_2eproto();
  friend void protobuf_ShutdownFile_common_5fstructs_2eproto();

  void InitAsDefaultInstance();
  static session_id_t* default_instance_;
};
// ===================================================================


// ===================================================================

// endpoint_t

// optional string address = 1;
inline bool endpoint_t::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void endpoint_t::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void endpoint_t::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void endpoint_t::clear_address() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    address_->clear();
  }
  clear_has_address();
}
inline const ::std::string& endpoint_t::address() const {
  return *address_;
}
inline void endpoint_t::set_address(const ::std::string& value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void endpoint_t::set_address(const char* value) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void endpoint_t::set_address(const char* value, size_t size) {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* endpoint_t::mutable_address() {
  set_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    address_ = new ::std::string;
  }
  return address_;
}
inline ::std::string* endpoint_t::release_address() {
  clear_has_address();
  if (address_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = address_;
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void endpoint_t::set_allocated_address(::std::string* address) {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (address) {
    set_has_address();
    address_ = address;
  } else {
    clear_has_address();
    address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 port = 2;
inline bool endpoint_t::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void endpoint_t::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void endpoint_t::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void endpoint_t::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 endpoint_t::port() const {
  return port_;
}
inline void endpoint_t::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// agent_id_t

// required uint64 user_id = 1;
inline bool agent_id_t::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void agent_id_t::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void agent_id_t::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void agent_id_t::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 agent_id_t::user_id() const {
  return user_id_;
}
inline void agent_id_t::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required string agent_key = 2;
inline bool agent_id_t::has_agent_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void agent_id_t::set_has_agent_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void agent_id_t::clear_has_agent_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void agent_id_t::clear_agent_key() {
  if (agent_key_ != &::google::protobuf::internal::kEmptyString) {
    agent_key_->clear();
  }
  clear_has_agent_key();
}
inline const ::std::string& agent_id_t::agent_key() const {
  return *agent_key_;
}
inline void agent_id_t::set_agent_key(const ::std::string& value) {
  set_has_agent_key();
  if (agent_key_ == &::google::protobuf::internal::kEmptyString) {
    agent_key_ = new ::std::string;
  }
  agent_key_->assign(value);
}
inline void agent_id_t::set_agent_key(const char* value) {
  set_has_agent_key();
  if (agent_key_ == &::google::protobuf::internal::kEmptyString) {
    agent_key_ = new ::std::string;
  }
  agent_key_->assign(value);
}
inline void agent_id_t::set_agent_key(const char* value, size_t size) {
  set_has_agent_key();
  if (agent_key_ == &::google::protobuf::internal::kEmptyString) {
    agent_key_ = new ::std::string;
  }
  agent_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* agent_id_t::mutable_agent_key() {
  set_has_agent_key();
  if (agent_key_ == &::google::protobuf::internal::kEmptyString) {
    agent_key_ = new ::std::string;
  }
  return agent_key_;
}
inline ::std::string* agent_id_t::release_agent_key() {
  clear_has_agent_key();
  if (agent_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = agent_key_;
    agent_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void agent_id_t::set_allocated_agent_key(::std::string* agent_key) {
  if (agent_key_ != &::google::protobuf::internal::kEmptyString) {
    delete agent_key_;
  }
  if (agent_key) {
    set_has_agent_key();
    agent_key_ = agent_key;
  } else {
    clear_has_agent_key();
    agent_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// session_id_t

// required uint64 user_id = 1;
inline bool session_id_t::has_user_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void session_id_t::set_has_user_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void session_id_t::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void session_id_t::clear_user_id() {
  user_id_ = GOOGLE_ULONGLONG(0);
  clear_has_user_id();
}
inline ::google::protobuf::uint64 session_id_t::user_id() const {
  return user_id_;
}
inline void session_id_t::set_user_id(::google::protobuf::uint64 value) {
  set_has_user_id();
  user_id_ = value;
}

// required string session_key = 2;
inline bool session_id_t::has_session_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void session_id_t::set_has_session_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void session_id_t::clear_has_session_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void session_id_t::clear_session_key() {
  if (session_key_ != &::google::protobuf::internal::kEmptyString) {
    session_key_->clear();
  }
  clear_has_session_key();
}
inline const ::std::string& session_id_t::session_key() const {
  return *session_key_;
}
inline void session_id_t::set_session_key(const ::std::string& value) {
  set_has_session_key();
  if (session_key_ == &::google::protobuf::internal::kEmptyString) {
    session_key_ = new ::std::string;
  }
  session_key_->assign(value);
}
inline void session_id_t::set_session_key(const char* value) {
  set_has_session_key();
  if (session_key_ == &::google::protobuf::internal::kEmptyString) {
    session_key_ = new ::std::string;
  }
  session_key_->assign(value);
}
inline void session_id_t::set_session_key(const char* value, size_t size) {
  set_has_session_key();
  if (session_key_ == &::google::protobuf::internal::kEmptyString) {
    session_key_ = new ::std::string;
  }
  session_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* session_id_t::mutable_session_key() {
  set_has_session_key();
  if (session_key_ == &::google::protobuf::internal::kEmptyString) {
    session_key_ = new ::std::string;
  }
  return session_key_;
}
inline ::std::string* session_id_t::release_session_key() {
  clear_has_session_key();
  if (session_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = session_key_;
    session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void session_id_t::set_allocated_session_key(::std::string* session_key) {
  if (session_key_ != &::google::protobuf::internal::kEmptyString) {
    delete session_key_;
  }
  if (session_key) {
    set_has_session_key();
    session_key_ = session_key;
  } else {
    clear_has_session_key();
    session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace maxwell

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_common_5fstructs_2eproto__INCLUDED
