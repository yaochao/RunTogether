// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common_structs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common_structs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace maxwell {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* endpoint_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  endpoint_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* agent_id_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  agent_id_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* session_id_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  session_id_t_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_common_5fstructs_2eproto() {
  protobuf_AddDesc_common_5fstructs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "common_structs.proto");
  GOOGLE_CHECK(file != NULL);
  endpoint_t_descriptor_ = file->message_type(0);
  static const int endpoint_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(endpoint_t, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(endpoint_t, port_),
  };
  endpoint_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      endpoint_t_descriptor_,
      endpoint_t::default_instance_,
      endpoint_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(endpoint_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(endpoint_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(endpoint_t));
  agent_id_t_descriptor_ = file->message_type(1);
  static const int agent_id_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_id_t, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_id_t, agent_key_),
  };
  agent_id_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      agent_id_t_descriptor_,
      agent_id_t::default_instance_,
      agent_id_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_id_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(agent_id_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(agent_id_t));
  session_id_t_descriptor_ = file->message_type(2);
  static const int session_id_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(session_id_t, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(session_id_t, session_key_),
  };
  session_id_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      session_id_t_descriptor_,
      session_id_t::default_instance_,
      session_id_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(session_id_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(session_id_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(session_id_t));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_common_5fstructs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    endpoint_t_descriptor_, &endpoint_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    agent_id_t_descriptor_, &agent_id_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    session_id_t_descriptor_, &session_id_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_common_5fstructs_2eproto() {
  delete endpoint_t::default_instance_;
  delete endpoint_t_reflection_;
  delete agent_id_t::default_instance_;
  delete agent_id_t_reflection_;
  delete session_id_t::default_instance_;
  delete session_id_t_reflection_;
}

void protobuf_AddDesc_common_5fstructs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024common_structs.proto\022\020maxwell.protocol"
    "\"+\n\nendpoint_t\022\017\n\007address\030\001 \001(\t\022\014\n\004port\030"
    "\002 \002(\r\"0\n\nagent_id_t\022\017\n\007user_id\030\001 \002(\004\022\021\n\t"
    "agent_key\030\002 \002(\t\"4\n\014session_id_t\022\017\n\007user_"
    "id\030\001 \002(\004\022\023\n\013session_key\030\002 \002(\t", 189);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common_structs.proto", &protobuf_RegisterTypes);
  endpoint_t::default_instance_ = new endpoint_t();
  agent_id_t::default_instance_ = new agent_id_t();
  session_id_t::default_instance_ = new session_id_t();
  endpoint_t::default_instance_->InitAsDefaultInstance();
  agent_id_t::default_instance_->InitAsDefaultInstance();
  session_id_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_common_5fstructs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_common_5fstructs_2eproto {
  StaticDescriptorInitializer_common_5fstructs_2eproto() {
    protobuf_AddDesc_common_5fstructs_2eproto();
  }
} static_descriptor_initializer_common_5fstructs_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int endpoint_t::kAddressFieldNumber;
const int endpoint_t::kPortFieldNumber;
#endif  // !_MSC_VER

endpoint_t::endpoint_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void endpoint_t::InitAsDefaultInstance() {
}

endpoint_t::endpoint_t(const endpoint_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void endpoint_t::SharedCtor() {
  _cached_size_ = 0;
  address_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

endpoint_t::~endpoint_t() {
  SharedDtor();
}

void endpoint_t::SharedDtor() {
  if (address_ != &::google::protobuf::internal::kEmptyString) {
    delete address_;
  }
  if (this != default_instance_) {
  }
}

void endpoint_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* endpoint_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return endpoint_t_descriptor_;
}

const endpoint_t& endpoint_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5fstructs_2eproto();
  return *default_instance_;
}

endpoint_t* endpoint_t::default_instance_ = NULL;

endpoint_t* endpoint_t::New() const {
  return new endpoint_t;
}

void endpoint_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_address()) {
      if (address_ != &::google::protobuf::internal::kEmptyString) {
        address_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool endpoint_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string address = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->address().data(), this->address().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void endpoint_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->address(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* endpoint_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string address = 1;
  if (has_address()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->address().data(), this->address().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->address(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int endpoint_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string address = 1;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->address());
    }

    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void endpoint_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const endpoint_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const endpoint_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void endpoint_t::MergeFrom(const endpoint_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_address()) {
      set_address(from.address());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void endpoint_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void endpoint_t::CopyFrom(const endpoint_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool endpoint_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void endpoint_t::Swap(endpoint_t* other) {
  if (other != this) {
    std::swap(address_, other->address_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata endpoint_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = endpoint_t_descriptor_;
  metadata.reflection = endpoint_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int agent_id_t::kUserIdFieldNumber;
const int agent_id_t::kAgentKeyFieldNumber;
#endif  // !_MSC_VER

agent_id_t::agent_id_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void agent_id_t::InitAsDefaultInstance() {
}

agent_id_t::agent_id_t(const agent_id_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void agent_id_t::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  agent_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

agent_id_t::~agent_id_t() {
  SharedDtor();
}

void agent_id_t::SharedDtor() {
  if (agent_key_ != &::google::protobuf::internal::kEmptyString) {
    delete agent_key_;
  }
  if (this != default_instance_) {
  }
}

void agent_id_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* agent_id_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return agent_id_t_descriptor_;
}

const agent_id_t& agent_id_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5fstructs_2eproto();
  return *default_instance_;
}

agent_id_t* agent_id_t::default_instance_ = NULL;

agent_id_t* agent_id_t::New() const {
  return new agent_id_t;
}

void agent_id_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_agent_key()) {
      if (agent_key_ != &::google::protobuf::internal::kEmptyString) {
        agent_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool agent_id_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_agent_key;
        break;
      }

      // required string agent_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_agent_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_agent_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->agent_key().data(), this->agent_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void agent_id_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required string agent_key = 2;
  if (has_agent_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent_key().data(), this->agent_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->agent_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* agent_id_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required string agent_key = 2;
  if (has_agent_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->agent_key().data(), this->agent_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->agent_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int agent_id_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required string agent_key = 2;
    if (has_agent_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->agent_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void agent_id_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const agent_id_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const agent_id_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void agent_id_t::MergeFrom(const agent_id_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_agent_key()) {
      set_agent_key(from.agent_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void agent_id_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void agent_id_t::CopyFrom(const agent_id_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool agent_id_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void agent_id_t::Swap(agent_id_t* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(agent_key_, other->agent_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata agent_id_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = agent_id_t_descriptor_;
  metadata.reflection = agent_id_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int session_id_t::kUserIdFieldNumber;
const int session_id_t::kSessionKeyFieldNumber;
#endif  // !_MSC_VER

session_id_t::session_id_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void session_id_t::InitAsDefaultInstance() {
}

session_id_t::session_id_t(const session_id_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void session_id_t::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_ULONGLONG(0);
  session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

session_id_t::~session_id_t() {
  SharedDtor();
}

void session_id_t::SharedDtor() {
  if (session_key_ != &::google::protobuf::internal::kEmptyString) {
    delete session_key_;
  }
  if (this != default_instance_) {
  }
}

void session_id_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* session_id_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return session_id_t_descriptor_;
}

const session_id_t& session_id_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_common_5fstructs_2eproto();
  return *default_instance_;
}

session_id_t* session_id_t::default_instance_ = NULL;

session_id_t* session_id_t::New() const {
  return new session_id_t;
}

void session_id_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_ULONGLONG(0);
    if (has_session_key()) {
      if (session_key_ != &::google::protobuf::internal::kEmptyString) {
        session_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool session_id_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_key;
        break;
      }

      // required string session_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->session_key().data(), this->session_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void session_id_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->user_id(), output);
  }

  // required string session_key = 2;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_key().data(), this->session_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->session_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* session_id_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->user_id(), target);
  }

  // required string session_key = 2;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->session_key().data(), this->session_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->session_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int session_id_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->user_id());
    }

    // required string session_key = 2;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->session_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void session_id_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const session_id_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const session_id_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void session_id_t::MergeFrom(const session_id_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_key()) {
      set_session_key(from.session_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void session_id_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void session_id_t::CopyFrom(const session_id_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool session_id_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void session_id_t::Swap(session_id_t* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_key_, other->session_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata session_id_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = session_id_t_descriptor_;
  metadata.reflection = session_id_t_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace maxwell

// @@protoc_insertion_point(global_scope)
