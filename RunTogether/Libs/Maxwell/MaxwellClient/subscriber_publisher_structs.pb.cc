// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: subscriber_publisher_structs.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "subscriber_publisher_structs.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace maxwell {
namespace protocol {

namespace {

const ::google::protobuf::Descriptor* subscribe_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  subscribe_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* unsubscribe_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  unsubscribe_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* client_heartbeat_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  client_heartbeat_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* ack_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ack_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* server_heartbeat_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  server_heartbeat_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* msg_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msg_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* msgs_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  msgs_t_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_subscriber_5fpublisher_5fstructs_2eproto() {
  protobuf_AddDesc_subscriber_5fpublisher_5fstructs_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "subscriber_publisher_structs.proto");
  GOOGLE_CHECK(file != NULL);
  subscribe_t_descriptor_ = file->message_type(0);
  static const int subscribe_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subscribe_t, session_id_),
  };
  subscribe_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      subscribe_t_descriptor_,
      subscribe_t::default_instance_,
      subscribe_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subscribe_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(subscribe_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(subscribe_t));
  unsubscribe_t_descriptor_ = file->message_type(1);
  static const int unsubscribe_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unsubscribe_t, session_id_),
  };
  unsubscribe_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      unsubscribe_t_descriptor_,
      unsubscribe_t::default_instance_,
      unsubscribe_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unsubscribe_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(unsubscribe_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(unsubscribe_t));
  client_heartbeat_t_descriptor_ = file->message_type(2);
  static const int client_heartbeat_t_offsets_[1] = {
  };
  client_heartbeat_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      client_heartbeat_t_descriptor_,
      client_heartbeat_t::default_instance_,
      client_heartbeat_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_heartbeat_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(client_heartbeat_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(client_heartbeat_t));
  ack_t_descriptor_ = file->message_type(3);
  static const int ack_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ack_t, msg_ids_),
  };
  ack_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ack_t_descriptor_,
      ack_t::default_instance_,
      ack_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ack_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ack_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ack_t));
  server_heartbeat_t_descriptor_ = file->message_type(4);
  static const int server_heartbeat_t_offsets_[1] = {
  };
  server_heartbeat_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      server_heartbeat_t_descriptor_,
      server_heartbeat_t::default_instance_,
      server_heartbeat_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_heartbeat_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(server_heartbeat_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(server_heartbeat_t));
  msg_t_descriptor_ = file->message_type(5);
  static const int msg_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_t, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_t, payload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_t, date_added_),
  };
  msg_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msg_t_descriptor_,
      msg_t::default_instance_,
      msg_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msg_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msg_t));
  msgs_t_descriptor_ = file->message_type(6);
  static const int msgs_t_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msgs_t, msgs_),
  };
  msgs_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      msgs_t_descriptor_,
      msgs_t::default_instance_,
      msgs_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msgs_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(msgs_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(msgs_t));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_subscriber_5fpublisher_5fstructs_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    subscribe_t_descriptor_, &subscribe_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    unsubscribe_t_descriptor_, &unsubscribe_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    client_heartbeat_t_descriptor_, &client_heartbeat_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ack_t_descriptor_, &ack_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    server_heartbeat_t_descriptor_, &server_heartbeat_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msg_t_descriptor_, &msg_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    msgs_t_descriptor_, &msgs_t::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_subscriber_5fpublisher_5fstructs_2eproto() {
  delete subscribe_t::default_instance_;
  delete subscribe_t_reflection_;
  delete unsubscribe_t::default_instance_;
  delete unsubscribe_t_reflection_;
  delete client_heartbeat_t::default_instance_;
  delete client_heartbeat_t_reflection_;
  delete ack_t::default_instance_;
  delete ack_t_reflection_;
  delete server_heartbeat_t::default_instance_;
  delete server_heartbeat_t_reflection_;
  delete msg_t::default_instance_;
  delete msg_t_reflection_;
  delete msgs_t::default_instance_;
  delete msgs_t_reflection_;
}

void protobuf_AddDesc_subscriber_5fpublisher_5fstructs_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::maxwell::protocol::protobuf_AddDesc_common_5fstructs_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"subscriber_publisher_structs.proto\022\020ma"
    "xwell.protocol\032\024common_structs.proto\"A\n\013"
    "subscribe_t\0222\n\nsession_id\030\001 \002(\0132\036.maxwel"
    "l.protocol.session_id_t\"C\n\runsubscribe_t"
    "\0222\n\nsession_id\030\001 \002(\0132\036.maxwell.protocol."
    "session_id_t\"\024\n\022client_heartbeat_t\"\034\n\005ac"
    "k_t\022\023\n\007msg_ids\030\001 \003(\004B\002\020\001\"\024\n\022server_heart"
    "beat_t\"8\n\005msg_t\022\n\n\002id\030\001 \002(\004\022\017\n\007payload\030\002"
    " \002(\014\022\022\n\ndate_added\030\003 \002(\r\"/\n\006msgs_t\022%\n\004ms"
    "gs\030\001 \003(\0132\027.maxwell.protocol.msg_t", 393);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "subscriber_publisher_structs.proto", &protobuf_RegisterTypes);
  subscribe_t::default_instance_ = new subscribe_t();
  unsubscribe_t::default_instance_ = new unsubscribe_t();
  client_heartbeat_t::default_instance_ = new client_heartbeat_t();
  ack_t::default_instance_ = new ack_t();
  server_heartbeat_t::default_instance_ = new server_heartbeat_t();
  msg_t::default_instance_ = new msg_t();
  msgs_t::default_instance_ = new msgs_t();
  subscribe_t::default_instance_->InitAsDefaultInstance();
  unsubscribe_t::default_instance_->InitAsDefaultInstance();
  client_heartbeat_t::default_instance_->InitAsDefaultInstance();
  ack_t::default_instance_->InitAsDefaultInstance();
  server_heartbeat_t::default_instance_->InitAsDefaultInstance();
  msg_t::default_instance_->InitAsDefaultInstance();
  msgs_t::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_subscriber_5fpublisher_5fstructs_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_subscriber_5fpublisher_5fstructs_2eproto {
  StaticDescriptorInitializer_subscriber_5fpublisher_5fstructs_2eproto() {
    protobuf_AddDesc_subscriber_5fpublisher_5fstructs_2eproto();
  }
} static_descriptor_initializer_subscriber_5fpublisher_5fstructs_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int subscribe_t::kSessionIdFieldNumber;
#endif  // !_MSC_VER

subscribe_t::subscribe_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void subscribe_t::InitAsDefaultInstance() {
  session_id_ = const_cast< ::maxwell::protocol::session_id_t*>(&::maxwell::protocol::session_id_t::default_instance());
}

subscribe_t::subscribe_t(const subscribe_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void subscribe_t::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

subscribe_t::~subscribe_t() {
  SharedDtor();
}

void subscribe_t::SharedDtor() {
  if (this != default_instance_) {
    delete session_id_;
  }
}

void subscribe_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* subscribe_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return subscribe_t_descriptor_;
}

const subscribe_t& subscribe_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_subscriber_5fpublisher_5fstructs_2eproto();
  return *default_instance_;
}

subscribe_t* subscribe_t::default_instance_ = NULL;

subscribe_t* subscribe_t::New() const {
  return new subscribe_t;
}

void subscribe_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session_id()) {
      if (session_id_ != NULL) session_id_->::maxwell::protocol::session_id_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool subscribe_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .maxwell.protocol.session_id_t session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void subscribe_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .maxwell.protocol.session_id_t session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* subscribe_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maxwell.protocol.session_id_t session_id = 1;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int subscribe_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maxwell.protocol.session_id_t session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void subscribe_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const subscribe_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const subscribe_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void subscribe_t::MergeFrom(const subscribe_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      mutable_session_id()->::maxwell::protocol::session_id_t::MergeFrom(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void subscribe_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void subscribe_t::CopyFrom(const subscribe_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool subscribe_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_session_id()) {
    if (!this->session_id().IsInitialized()) return false;
  }
  return true;
}

void subscribe_t::Swap(subscribe_t* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata subscribe_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = subscribe_t_descriptor_;
  metadata.reflection = subscribe_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int unsubscribe_t::kSessionIdFieldNumber;
#endif  // !_MSC_VER

unsubscribe_t::unsubscribe_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void unsubscribe_t::InitAsDefaultInstance() {
  session_id_ = const_cast< ::maxwell::protocol::session_id_t*>(&::maxwell::protocol::session_id_t::default_instance());
}

unsubscribe_t::unsubscribe_t(const unsubscribe_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void unsubscribe_t::SharedCtor() {
  _cached_size_ = 0;
  session_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

unsubscribe_t::~unsubscribe_t() {
  SharedDtor();
}

void unsubscribe_t::SharedDtor() {
  if (this != default_instance_) {
    delete session_id_;
  }
}

void unsubscribe_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* unsubscribe_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return unsubscribe_t_descriptor_;
}

const unsubscribe_t& unsubscribe_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_subscriber_5fpublisher_5fstructs_2eproto();
  return *default_instance_;
}

unsubscribe_t* unsubscribe_t::default_instance_ = NULL;

unsubscribe_t* unsubscribe_t::New() const {
  return new unsubscribe_t;
}

void unsubscribe_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_session_id()) {
      if (session_id_ != NULL) session_id_->::maxwell::protocol::session_id_t::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool unsubscribe_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .maxwell.protocol.session_id_t session_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void unsubscribe_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .maxwell.protocol.session_id_t session_id = 1;
  if (has_session_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->session_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* unsubscribe_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .maxwell.protocol.session_id_t session_id = 1;
  if (has_session_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->session_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int unsubscribe_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .maxwell.protocol.session_id_t session_id = 1;
    if (has_session_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void unsubscribe_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const unsubscribe_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const unsubscribe_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void unsubscribe_t::MergeFrom(const unsubscribe_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_session_id()) {
      mutable_session_id()->::maxwell::protocol::session_id_t::MergeFrom(from.session_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void unsubscribe_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unsubscribe_t::CopyFrom(const unsubscribe_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unsubscribe_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_session_id()) {
    if (!this->session_id().IsInitialized()) return false;
  }
  return true;
}

void unsubscribe_t::Swap(unsubscribe_t* other) {
  if (other != this) {
    std::swap(session_id_, other->session_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata unsubscribe_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = unsubscribe_t_descriptor_;
  metadata.reflection = unsubscribe_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

client_heartbeat_t::client_heartbeat_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void client_heartbeat_t::InitAsDefaultInstance() {
}

client_heartbeat_t::client_heartbeat_t(const client_heartbeat_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void client_heartbeat_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

client_heartbeat_t::~client_heartbeat_t() {
  SharedDtor();
}

void client_heartbeat_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void client_heartbeat_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* client_heartbeat_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return client_heartbeat_t_descriptor_;
}

const client_heartbeat_t& client_heartbeat_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_subscriber_5fpublisher_5fstructs_2eproto();
  return *default_instance_;
}

client_heartbeat_t* client_heartbeat_t::default_instance_ = NULL;

client_heartbeat_t* client_heartbeat_t::New() const {
  return new client_heartbeat_t;
}

void client_heartbeat_t::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool client_heartbeat_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void client_heartbeat_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* client_heartbeat_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int client_heartbeat_t::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void client_heartbeat_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const client_heartbeat_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const client_heartbeat_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void client_heartbeat_t::MergeFrom(const client_heartbeat_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void client_heartbeat_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void client_heartbeat_t::CopyFrom(const client_heartbeat_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool client_heartbeat_t::IsInitialized() const {

  return true;
}

void client_heartbeat_t::Swap(client_heartbeat_t* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata client_heartbeat_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = client_heartbeat_t_descriptor_;
  metadata.reflection = client_heartbeat_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ack_t::kMsgIdsFieldNumber;
#endif  // !_MSC_VER

ack_t::ack_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ack_t::InitAsDefaultInstance() {
}

ack_t::ack_t(const ack_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ack_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ack_t::~ack_t() {
  SharedDtor();
}

void ack_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ack_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ack_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ack_t_descriptor_;
}

const ack_t& ack_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_subscriber_5fpublisher_5fstructs_2eproto();
  return *default_instance_;
}

ack_t* ack_t::default_instance_ = NULL;

ack_t* ack_t::New() const {
  return new ack_t;
}

void ack_t::Clear() {
  msg_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ack_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 msg_ids = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_msg_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 10, input, this->mutable_msg_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ack_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 msg_ids = 1 [packed = true];
  if (this->msg_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_msg_ids_cached_byte_size_);
  }
  for (int i = 0; i < this->msg_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64NoTag(
      this->msg_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ack_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 msg_ids = 1 [packed = true];
  if (this->msg_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _msg_ids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->msg_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->msg_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ack_t::ByteSize() const {
  int total_size = 0;

  // repeated uint64 msg_ids = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->msg_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->msg_ids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _msg_ids_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ack_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ack_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ack_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ack_t::MergeFrom(const ack_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  msg_ids_.MergeFrom(from.msg_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ack_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ack_t::CopyFrom(const ack_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ack_t::IsInitialized() const {

  return true;
}

void ack_t::Swap(ack_t* other) {
  if (other != this) {
    msg_ids_.Swap(&other->msg_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ack_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ack_t_descriptor_;
  metadata.reflection = ack_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

server_heartbeat_t::server_heartbeat_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void server_heartbeat_t::InitAsDefaultInstance() {
}

server_heartbeat_t::server_heartbeat_t(const server_heartbeat_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void server_heartbeat_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

server_heartbeat_t::~server_heartbeat_t() {
  SharedDtor();
}

void server_heartbeat_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void server_heartbeat_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* server_heartbeat_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return server_heartbeat_t_descriptor_;
}

const server_heartbeat_t& server_heartbeat_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_subscriber_5fpublisher_5fstructs_2eproto();
  return *default_instance_;
}

server_heartbeat_t* server_heartbeat_t::default_instance_ = NULL;

server_heartbeat_t* server_heartbeat_t::New() const {
  return new server_heartbeat_t;
}

void server_heartbeat_t::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool server_heartbeat_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void server_heartbeat_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* server_heartbeat_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int server_heartbeat_t::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void server_heartbeat_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const server_heartbeat_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const server_heartbeat_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void server_heartbeat_t::MergeFrom(const server_heartbeat_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void server_heartbeat_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void server_heartbeat_t::CopyFrom(const server_heartbeat_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool server_heartbeat_t::IsInitialized() const {

  return true;
}

void server_heartbeat_t::Swap(server_heartbeat_t* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata server_heartbeat_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = server_heartbeat_t_descriptor_;
  metadata.reflection = server_heartbeat_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msg_t::kIdFieldNumber;
const int msg_t::kPayloadFieldNumber;
const int msg_t::kDateAddedFieldNumber;
#endif  // !_MSC_VER

msg_t::msg_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msg_t::InitAsDefaultInstance() {
}

msg_t::msg_t(const msg_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msg_t::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  payload_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_added_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msg_t::~msg_t() {
  SharedDtor();
}

void msg_t::SharedDtor() {
  if (payload_ != &::google::protobuf::internal::kEmptyString) {
    delete payload_;
  }
  if (this != default_instance_) {
  }
}

void msg_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msg_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msg_t_descriptor_;
}

const msg_t& msg_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_subscriber_5fpublisher_5fstructs_2eproto();
  return *default_instance_;
}

msg_t* msg_t::default_instance_ = NULL;

msg_t* msg_t::New() const {
  return new msg_t;
}

void msg_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_payload()) {
      if (payload_ != &::google::protobuf::internal::kEmptyString) {
        payload_->clear();
      }
    }
    date_added_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msg_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_payload;
        break;
      }

      // required bytes payload = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_date_added;
        break;
      }

      // required uint32 date_added = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_date_added:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_added_)));
          set_has_date_added();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msg_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required bytes payload = 2;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->payload(), output);
  }

  // required uint32 date_added = 3;
  if (has_date_added()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->date_added(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msg_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required bytes payload = 2;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  // required uint32 date_added = 3;
  if (has_date_added()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->date_added(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msg_t::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required bytes payload = 2;
    if (has_payload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload());
    }

    // required uint32 date_added = 3;
    if (has_date_added()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->date_added());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msg_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msg_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msg_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msg_t::MergeFrom(const msg_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_payload()) {
      set_payload(from.payload());
    }
    if (from.has_date_added()) {
      set_date_added(from.date_added());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msg_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msg_t::CopyFrom(const msg_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msg_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void msg_t::Swap(msg_t* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(payload_, other->payload_);
    std::swap(date_added_, other->date_added_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msg_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msg_t_descriptor_;
  metadata.reflection = msg_t_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int msgs_t::kMsgsFieldNumber;
#endif  // !_MSC_VER

msgs_t::msgs_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void msgs_t::InitAsDefaultInstance() {
}

msgs_t::msgs_t(const msgs_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void msgs_t::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

msgs_t::~msgs_t() {
  SharedDtor();
}

void msgs_t::SharedDtor() {
  if (this != default_instance_) {
  }
}

void msgs_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* msgs_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return msgs_t_descriptor_;
}

const msgs_t& msgs_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_subscriber_5fpublisher_5fstructs_2eproto();
  return *default_instance_;
}

msgs_t* msgs_t::default_instance_ = NULL;

msgs_t* msgs_t::New() const {
  return new msgs_t;
}

void msgs_t::Clear() {
  msgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool msgs_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .maxwell.protocol.msg_t msgs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_msgs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void msgs_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .maxwell.protocol.msg_t msgs = 1;
  for (int i = 0; i < this->msgs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msgs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* msgs_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .maxwell.protocol.msg_t msgs = 1;
  for (int i = 0; i < this->msgs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msgs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int msgs_t::ByteSize() const {
  int total_size = 0;

  // repeated .maxwell.protocol.msg_t msgs = 1;
  total_size += 1 * this->msgs_size();
  for (int i = 0; i < this->msgs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->msgs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void msgs_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const msgs_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const msgs_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void msgs_t::MergeFrom(const msgs_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  msgs_.MergeFrom(from.msgs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void msgs_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void msgs_t::CopyFrom(const msgs_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool msgs_t::IsInitialized() const {

  for (int i = 0; i < msgs_size(); i++) {
    if (!this->msgs(i).IsInitialized()) return false;
  }
  return true;
}

void msgs_t::Swap(msgs_t* other) {
  if (other != this) {
    msgs_.Swap(&other->msgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata msgs_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = msgs_t_descriptor_;
  metadata.reflection = msgs_t_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace maxwell

// @@protoc_insertion_point(global_scope)
