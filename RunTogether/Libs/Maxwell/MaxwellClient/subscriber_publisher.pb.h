// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: subscriber_publisher.proto

#ifndef PROTOBUF_subscriber_5fpublisher_2eproto__INCLUDED
#define PROTOBUF_subscriber_5fpublisher_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include "subscriber_publisher_structs.pb.h"
// @@protoc_insertion_point(includes)

namespace maxwell {
namespace protocol {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_subscriber_5fpublisher_2eproto();
void protobuf_AssignDesc_subscriber_5fpublisher_2eproto();
void protobuf_ShutdownFile_subscriber_5fpublisher_2eproto();


enum sub_type_t {
  SUBSCRIBE = 1,
  UNSUBSCRIBE = 2,
  CLIENT_HEARTBEAT = 3,
  ACK = 4
};
bool sub_type_t_IsValid(int value);
const sub_type_t sub_type_t_MIN = SUBSCRIBE;
const sub_type_t sub_type_t_MAX = ACK;
const int sub_type_t_ARRAYSIZE = sub_type_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* sub_type_t_descriptor();
inline const ::std::string& sub_type_t_Name(sub_type_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    sub_type_t_descriptor(), value);
}
inline bool sub_type_t_Parse(
    const ::std::string& name, sub_type_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<sub_type_t>(
    sub_type_t_descriptor(), name, value);
}
enum pub_type_t {
  SERVER_HEARTBEAT = 1,
  MSG = 2,
  MSGS = 3
};
bool pub_type_t_IsValid(int value);
const pub_type_t pub_type_t_MIN = SERVER_HEARTBEAT;
const pub_type_t pub_type_t_MAX = MSGS;
const int pub_type_t_ARRAYSIZE = pub_type_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* pub_type_t_descriptor();
inline const ::std::string& pub_type_t_Name(pub_type_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    pub_type_t_descriptor(), value);
}
inline bool pub_type_t_Parse(
    const ::std::string& name, pub_type_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<pub_type_t>(
    pub_type_t_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================


// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol
}  // namespace maxwell

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::maxwell::protocol::sub_type_t>() {
  return ::maxwell::protocol::sub_type_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::maxwell::protocol::pub_type_t>() {
  return ::maxwell::protocol::pub_type_t_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_subscriber_5fpublisher_2eproto__INCLUDED
